
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Copyright (C) 2016  Iain Saunders                                         ''
''                                                                            ''
''  This program is free software: you can redistribute it and/or modify      ''
''  it under the terms of the GNU General Public License as published by      ''
''  the Free Software Foundation, either version 3 of the License, or         ''
''  (at your option) any later version.                                       ''
''                                                                            ''
''  This program is distributed in the hope that it will be useful,           ''
''  but WITHOUT ANY WARRANTY; without even the implied warranty of            ''
''  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             ''
''  GNU General Public License for more details.                              ''
''                                                                            ''
''  You should have received a copy of the GNU General Public License         ''
''  along with this program.  If not, see <http://www.gnu.org/licenses/>.     ''
''                                                                            ''
''  This code is hosted on GitHub <https://github.com/iain87/VBA_projects>.   ''
''                                                                            ''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''                                                                            ''
''  To run this code, you will require the Microsoft Scripting Runtime        ''
''  package, which you can enable from the VBE editor by going to tools       ''
''  then references and choosing it from the list there.                      ''
''                                                                            ''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

Public Sub MatchArrays()

    Dim userInputCells(1 To 4) As Range
    Dim userInputArrays(1 To 4) As Variant
    Dim thisFirstRow As Long
    Dim thisLastRow As Long
    Dim loopNumber As Long
    
    For loopNumber = 1 To 4
    
        Set userInputCells(loopNumber) = Application.InputBox("Select the first cell of your reference column.", Type:=8)
        
        If loopNumber = 1 Or loopNumber = 3 Then
            thisFirstRow = userInputCells(loopNumber).Row
            thisLastRow = userInputCells(loopNumber).End(xlDown).Row
        End If
            
        Set userInputCells(loopNumber) = userInputCells(loopNumber).Parent.Cells(thisFirstRow, userInputCells(loopNumber).Column)
        
        With userInputCells(loopNumber)
            userInputArrays(loopNumber) = .Parent.Range(.Address, .Offset(thisLastRow - thisFirstRow))
        End With
        
    Next loopNumber
    
    Dim arrayMatchDictionary As Scripting.Dictionary
    Set arrayMatchDictionary = New Scripting.Dictionary
    
    Call PopulateDictionaryWithArray( _
        arrayMatchDictionary, _
        userInputArrays(3), _
        userInputArrays(4))
        
    Dim arrayToPaste As Variant
    ReDim arrayToPaste(1 To UBound(userInputArrays(1), 1), 1 To 1)
    
    arrayToPaste = CompareArrayToDictionary( _
        arrayMatchDictionary, _
        userInputArrays(1), _
        userInputArrays(2))
        
    With userInputCells(2)
        .Parent.Range(.Address, .Offset(UBound(arrayToPaste, 1) - LBound(arrayToPaste, 1))) = arrayToPaste
    End With
        
End Sub

Sub PopulateDictionaryWithArray( _
    ByRef arrayMatchDictionary As Variant, _
    ByRef comparisonArray As Variant, _
    ByRef returnArray As Variant)
    
    With arrayMatchDictionary
        .CompareMode = vbTextCompare
        
        Dim loopCount As Long
        For loopCount = LBound(comparisonArray, 1) To UBound(comparisonArray, 1)
            If Not .Exists(comparisonArray(loopCount, 1)) Then
                .Add comparisonArray(loopCount, 1), returnArray(loopCount, 1)
            End If
        Next loopCount
        
    End With
    
End Sub

Function CompareArrayToDictionary( _
    ByRef arrayMatchDictionary As Variant, _
    ByRef referenceArray As Variant, _
    ByRef targetArray As Variant)
    
    Dim dictionaryLoopedArray As Variant
    ReDim dictionaryLoopedArray(1 To UBound(referenceArray, 1), 1 To 1)
    
    With arrayMatchDictionary
    
        Dim loopCount As Long
        For loopCount = LBound(referenceArray, 1) To UBound(referenceArray, 1)
            If Len(targetArray(loopCount, 1)) = 0 Then
                If .Exists(referenceArray(loopCount, 1)) Then
                    dictionaryLoopedArray(loopCount, 1) = .Item(referenceArray(loopCount, 1))
                End If
            Else
                dictionaryLoopedArray(loopCount, 1) = targetArray(loopCount, 1)
            End If
        Next loopCount
        
    End With
    
    CompareArrayToDictionary = dictionaryLoopedArray

End Function
