
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Copyright (C) 2016  Iain Saunders                                                                 ''
''                                                                                                    ''
''  Permission is hereby granted, free of charge, to any person obtaining a copy of this software     ''
''  and associated documentation files (the "Software"), to deal in the Software without restriction, ''
''  including without limitation the rights to use, copy, modify, merge, publish,distribute,          ''
''  sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is     ''
''  furnished to do so, subject to the following conditions:                                          ''
''                                                                                                    ''
''  The above copyright notice and this permission notice shall be included in all copies or          ''
''  substantial portions of the Software.                                                             ''
''                                                                                                    ''
''  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING     ''
''  BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND        ''
''  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,      ''
''  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,    ''
''  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.           ''
''                                                                                                    ''
''  This code is hosted on GitHub <https://github.com/iain87/VBA_projects>.                           ''
''                                                                                                    ''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

Public Sub MatchArraysWithUserInput()
      
    Dim matchCell As Range
    Set matchCell = InputToRange("Select the FIRST cell from the column to MATCH.")
    If matchCell Is Nothing Then Exit Sub
    
    Dim targetCell As Range
    Set targetCell = ActiveCell
    If targetCell Is Nothing Then Exit Sub
    
    Dim compareCell As Range
    Set compareCell = InputToRange("Select the FIRST cell from the column to LOOKUP.")
    If compareCell Is Nothing Then Exit Sub
    
    Dim returnCell As Range
    Set returnCell = InputToRange("Select ANY cell from the column to RETURN VALUES.")
    If returnCell Is Nothing Then Exit Sub
     
    Dim arrayToPaste As Variant
    arrayToPaste = MatchArrays( _
        RangeToLastRow(matchCell), _
        RangeToLastRow(targetCell, LastRow(matchCell)), _
        RangeToLastRow(compareCell), _
        RangeToLastRow(returnCell))

    RangeToLastRow(targetCell, targetCell.Row + UBound(arrayToPaste, 1) - 1) = arrayToPaste

End Sub

Function MatchArrays(ByVal matchRange As Range, ByVal targetRange As Range, ByVal compareRange As Range, Optional ByVal returnRange As Range)
   
    Dim matchArray As Variant
    matchArray = matchRange
    
    Dim targetArray As Variant
    targetArray = targetRange
    
    Dim compareArray As Variant
    compareArray = compareRange
    
    Dim returnArray As Variant
    returnArray = returnRange
    
    Dim arrayToPaste As Variant
    ReDim arrayToPaste(1 To UBound(matchArray, 1))
    
    Dim arrayMatchDictionary As Dictionary
    Set arrayMatchDictionary = New Dictionary
    Set arrayMatchDictionary = PopulateDictionaryWithArray(compareArray, returnArray)
    
    arrayToPaste = CompareArrayToDictionary(arrayMatchDictionary, matchArray)

    MatchArrays = OverwriteWithAuthoritativeArray(targetArray, arrayToPaste, 1)

End Function

Function PopulateDictionaryWithArray(ByRef comparisonArray As Variant, ByRef returnArray As Variant) As Dictionary
    
    Dim dict As Dictionary
    Set dict = New Dictionary
    
    With dict
        .CompareMode = vbTextCompare
        
        Dim loopCount As Long
        For loopCount = LBound(comparisonArray, 1) To UBound(comparisonArray, 1)
            If Not .Exists(comparisonArray(loopCount, 1)) Then
                .Add comparisonArray(loopCount, 1), returnArray(loopCount, 1)
            End If
        Next loopCount
        
    End With
    
    Set PopulateDictionaryWithArray = dict
    
End Function

Function CompareArrayToDictionary(ByRef arrayMatchDictionary As Dictionary, ByRef referenceArray As Variant)
    
    Dim dictionaryLoopedArray As Variant
    ReDim dictionaryLoopedArray(1 To UBound(referenceArray, 1), 1 To 1)
    
    With arrayMatchDictionary
    
        Dim loopCount As Long
        For loopCount = LBound(referenceArray, 1) To UBound(referenceArray, 1)
            If .Exists(referenceArray(loopCount, 1)) Then
                dictionaryLoopedArray(loopCount, 1) = .Item(referenceArray(loopCount, 1))
            End If
        Next loopCount
        
    End With
    
    CompareArrayToDictionary = dictionaryLoopedArray

End Function

Function LastRow(ByRef userInputCell As Range)

    With userInputCell
        LastRow = .Parent.Cells(.Parent.Rows.Count, .Column).End(xlUp).Row
    End With

End Function

Function RangeToLastRow(ByRef FirstCell As Range, Optional ByVal DefinedLastRow As Long)

    Dim thisLastRow As Long

    If DefinedLastRow > 1 Then
        thisLastRow = DefinedLastRow
    Else
        thisLastRow = LastRow(FirstCell)
    End If

    With FirstCell
        Set RangeToLastRow = .Parent.Range(.Parent.Cells(.Row, .Column), .Parent.Cells(thisLastRow, .Column))
    End With
    
End Function

Function InputToRange(ByVal InputText As String) As Range

        On Error GoTo InputError
        Set InputToRange = Application.InputBox(InputText, "Match Array", Type:=8)
InputError:
        If InputToRange Is Nothing Then Exit Function

End Function

Function OverwriteWithAuthoritativeArray(ByRef AuthoritativeArray As Variant, ByRef ArrayToOverwrite As Variant, ByVal ColumnToCompare As Long)

    Dim loopCount As Long
    For loopCount = LBound(ArrayToOverwrite, ColumnToCompare) To UBound(ArrayToOverwrite, ColumnToCompare)
        If Len(ArrayToOverwrite(loopCount, ColumnToCompare)) = 0 Then
            ArrayToOverwrite(loopCount, ColumnToCompare) = AuthoritativeArray(loopCount, ColumnToCompare)
        End If
    Next loopCount
    
    OverwriteWithAuthoritativeArray = ArrayToOverwrite

End Function

