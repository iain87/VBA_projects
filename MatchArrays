
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Copyright (C) 2016  Iain Saunders                                         ''
''                                                                            ''
''  This program is free software: you can redistribute it and/or modify      ''
''  it under the terms of the GNU General Public License as published by      ''
''  the Free Software Foundation, either version 3 of the License, or         ''
''  (at your option) any later version.                                       ''
''                                                                            ''
''  This program is distributed in the hope that it will be useful,           ''
''  but WITHOUT ANY WARRANTY; without even the implied warranty of            ''
''  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             ''
''  GNU General Public License for more details.                              ''
''                                                                            ''
''  You should have received a copy of the GNU General Public License         ''
''  along with this program.  If not, see <http://www.gnu.org/licenses/>.     ''
''                                                                            ''
''  This code is hosted on GitHub <https://github.com/iain87/VBA_projects>.   ''
''                                                                            ''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''                                                                            ''
''  To run this code, you will require the Microsoft Scripting Runtime        ''
''  package, which you can enable from the VBE editor by going to tools       ''
''  then references and choosing it from the list there.                      ''
''                                                                            ''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

Public Sub MatchArrays()

    Dim referenceArray As Variant
    Dim referenceCell As Range
    Dim referenceLastRow As Long
    Set referenceCell = Application.InputBox("Select the first cell of your comparison column.", Type:=8)
    referenceLastRow = referenceCell.End(xlDown).Row
    With referenceCell
        referenceArray = .Parent.Range(.Address, Left(.Address, Len(.Address) - 1) & referenceLastRow)
    End With

    Dim targetArray As Variant
    Dim targetCell As Range
    Set targetCell = Application.InputBox("Select the first cell of your target column.", Type:=8)
    With targetCell
        targetArray = .Parent.Range(.Address, Left(.Address, Len(.Address) - 1) & referenceLastRow)
    End With

    Dim loopCount As Long
    
    ReDim Preserve referenceArray(1 To UBound(referenceArray, 1), 1 To UBound(referenceArray, 2) + 1)
    For loopCount = LBound(referenceArray, 1) To UBound(referenceArray, 1)
        referenceArray(loopCount, UBound(referenceArray, 2)) = targetArray(loopCount, 1)
    Next loopCount
    
    Dim comparisonArray As Variant
    Dim comparisonCell As Range
    Dim comparisonLastRow As Long
    Set comparisonCell = Application.InputBox("Select the first cell of the column to match values with.", Type:=8)
    comparisonLastRow = comparisonCell.End(xlDown).Row
    With comparisonCell
        comparisonArray = .Parent.Range(.Address, Left(.Address, Len(.Address) - 1) & comparisonLastRow)
    End With

    Dim returnArray As Variant
    Dim returnCell As Range
    Set returnCell = Application.InputBox("Select the first cell from the column you wish to return values from.", Type:=8)
    With returnCell
        returnArray = .Parent.Range(.Address, Left(.Address, Len(.Address) - 1) & comparisonLastRow)
    End With

    ReDim Preserve comparisonArray(1 To UBound(comparisonArray, 1), 1 To UBound(comparisonArray, 2) + 1)
    For loopCount = LBound(comparisonArray, 1) To UBound(comparisonArray, 1)
        comparisonArray(loopCount, UBound(comparisonArray, 2)) = returnArray(loopCount, 1)
    Next loopCount
    
    Dim arrayMatchDictionary As Scripting.Dictionary
    Set arrayMatchDictionary = New Scripting.Dictionary
    
    Call PopulateDictionaryWithArray( _
        arrayMatchDictionary, _
        comparisonArray)
        
    Dim arrayToPaste As Variant
    ReDim arrayToPaste(1 To UBound(referenceArray, 1), 1 To 1)
    
    arrayToPaste = CompareArrayToDictionary(arrayMatchDictionary, referenceArray)
        
    With targetCell
        .Parent.Range(.Address, Left(.Address, Len(.Address) - 1) & referenceLastRow) = arrayToPaste
    End With
        
End Sub

Sub PopulateDictionaryWithArray( _
    ByRef arrayMatchDictionary As Variant, _
    ByRef comparisonArray As Variant)
    
    With arrayMatchDictionary
        .CompareMode = vbTextCompare
        
        Dim loopCount As Long
        For loopCount = LBound(comparisonArray, 1) To UBound(comparisonArray, 1)
            If Not .Exists(comparisonArray(loopCount, 1)) Then
                .Add comparisonArray(loopCount, 1), comparisonArray(loopCount, 2)
            End If
        Next loopCount
    End With
    
End Sub

Function CompareArrayToDictionary( _
    ByRef arrayMatchDictionary As Variant, _
    ByRef referenceArray As Variant)
    
    Dim dictionaryLoopedArray As Variant
    ReDim dictionaryLoopedArray(1 To UBound(referenceArray, 1), 1 To 1)
    
    With arrayMatchDictionary
        Dim loopCount As Long
        For loopCount = LBound(referenceArray, 1) To UBound(referenceArray, 1)
            If Len(referenceArray(loopCount, 2)) = 0 Then
                If .Exists(referenceArray(loopCount, 1)) Then
                    dictionaryLoopedArray(loopCount, 1) = .Item(referenceArray(loopCount, 1))
                End If
            Else
                dictionaryLoopedArray(loopCount, 1) = referenceArray(loopCount, 2)
            End If
        Next loopCount
        
    End With
    
    CompareArrayToDictionary = dictionaryLoopedArray

End Function
