
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Copyright (C) 2016  Iain Saunders                                         ''
''                                                                            ''
''  This program is free software: you can redistribute it and/or modify      ''
''  it under the terms of the GNU General Public License as published by      ''
''  the Free Software Foundation, either version 3 of the License, or         ''
''  (at your option) any later version.                                       ''
''                                                                            ''
''  This program is distributed in the hope that it will be useful,           ''
''  but WITHOUT ANY WARRANTY; without even the implied warranty of            ''
''  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             ''
''  GNU General Public License for more details.                              ''
''                                                                            ''
''  You should have received a copy of the GNU General Public License         ''
''  along with this program.  If not, see <http://www.gnu.org/licenses/>.     ''
''                                                                            ''
''  This code is hosted on GitHub <https://github.com/iain87/VBA_projects>.   ''
''                                                                            ''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

Public Sub MatchArrays()
    
    Dim arrayMatchDictionary As Dictionary
    Set arrayMatchDictionary = New Dictionary

    Dim userInputCells(1 To 4) As Range
    Dim userInputArrays(1 To 4) As Variant
    Dim thisFirstRow As Long
    Dim thisLastRow As Long
    
    Dim inputBoxText(1 To 4) As String
    inputBoxText(1) = "Select the FIRST cell from the column to MATCH."
    inputBoxText(2) = "Select ANY cell from the column you want to TARGET. This should be on the same worksheet as the MATCH column."
    inputBoxText(3) = "Select the FIRST cell from the column to LOOKUP."
    inputBoxText(4) = "Select ANY cell from the column you want to RETURN VALUES. This should be on the same worksheet as the LOOKUP column."
        
    Dim loopCount As Long
    For loopCount = 1 To 4
                
SheetError:
        Set userInputCells(loopCount) = InputToRange
                
        Select Case loopCount
            Case 2, 4
                If Not userInputCells(loopCount).Parent.Name = userInputCells(loopCount - 1).Parent.Name Then GoTo SheetError
                Set userInputCells(loopCount) = userInputCells(loopCount).Parent.Cells(userInputCells(loopCount - 1).Row, userInputCells(loopCount).Column)
                userInputArrays(loopCount) = RangeToLastRow(userInputCells(loopCount), thisLastRow)
            Case 1, 3
                thisLastRow = LastRow(userInputCells(loopCount))
                userInputArrays(loopCount) = RangeToLastRow(userInputCells(loopCount))
            End Select
            
    Next loopCount
    
    arrayMatchDictionary = PopulateDictionaryWithArray(userInputArrays(3), userInputArrays(4))
        
    Dim arrayToPaste As Variant
    ReDim arrayToPaste(1 To UBound(userInputArrays(1), 1))
    
    arrayToPaste = CompareArrayToDictionary(arrayMatchDictionary, userInputArrays(1))
        
    arrayToPaste = OverwriteWithAuthoritativeArray(userInputArrays(2), arrayToPaste, 1)

    RangeToLastRow(userInputCells(2), UBound(arrayToPaste, 1)) = arrayToPaste

End Sub

Function PopulateDictionaryWithArray(ByRef comparisonArray As Variant, ByRef returnArray As Variant) As Dictionary
    
    With PopulateDictionaryWithArray
        .CompareMode = vbTextCompare
        
        Dim loopCount As Long
        For loopCount = LBound(comparisonArray, 1) To UBound(comparisonArray, 1)
            If Not .Exists(comparisonArray(loopCount, 1)) Then
                .Add comparisonArray(loopCount, 1), returnArray(loopCount, 1)
            End If
        Next loopCount
        
    End With
    
End Function

Function CompareArrayToDictionary(ByRef arrayMatchDictionary As Dictionary, ByRef referenceArray As Variant)
    
    Dim dictionaryLoopedArray As Variant
    ReDim dictionaryLoopedArray(1 To UBound(referenceArray, 1), 1 To 1)
    
    With arrayMatchDictionary
    
        Dim loopCount As Long
        For loopCount = LBound(referenceArray, 1) To UBound(referenceArray, 1)
            If .Exists(referenceArray(loopCount, 1)) Then
                dictionaryLoopedArray(loopCount, 1) = .Item(referenceArray(loopCount, 1))
            End If
        Next loopCount
        
    End With
    
    CompareArrayToDictionary = dictionaryLoopedArray

End Function

Function LastRow(ByRef userInputCell As Range)

    With userInputCell
        LastRow = .Parent.Cells(.Parent.Rows.Count, .Column).End(xlUp).Row
    End With

End Function

Function RangeToLastRow(ByRef FirstCell As Range, Optional ByVal DefinedLastRow As Long)

' set range from first to last row RangeToLastRow("A1",LastRow)
    Dim thisLastRow As Long

    If DefinedLastRow > 1 Then
        thisLastRow = DefinedLastRow
    Else
        thisLastRow = LastRow(FirstCell)
    End If
    
    With FirstCell
        Set RangeToLastRow = .Parent.Range(.Parent.Cells(.Row, .Column), .Parent.Cells(thisLastRow, .Column))
    End With
    
End Function

Function InputToRange() As Range

        On Error GoTo InputError
        Set InputToRange = Application.InputBox(inputBoxText(loopNumber), "Match Array", Type:=8)
InputError:
        If InputToRange Is Nothing Then Exit Sub

End Function

Function OverwriteWithAuthoritativeArray(ByRef AuthoritativeArray As Variant, ByRef ArrayToOverwrite As Variant, ByVal ColumnToCompare As Long)
    
    Dim loopCount As Long
    For loopCount = LBound(ArrayToOverwrite, ColumnToCompare) To UBound(ArrayToOverwrite, ColumnToCompare)
        If Not Len(AuthoritativeArray(loopCount, ColumnToCompare)) = 0 Then
            ArrayToOverwrite(loopCount, ColumnToCompare) = AuthoritativeArray(loopCount, ColumnToCompare)
        End If
    Next loopCount

End Function
